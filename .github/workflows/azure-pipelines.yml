name: Build and deploy ASP.Net framework 4.6 app to an Azure Web App
 
env:
  AZURE_WEBAPP_NAME_DEV: dev-cobra-dotnet-webapp    # set this to the name of your Azure Web App
  AZURE_WEBAPP_NAME_STAGE: stg-cobra-dotnet-webapp    # set this to the name of your Azure Web App
  AZURE_WEBAPP_NAME: cobra-dotnet-webapp    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
on:
  push:
    branches: [ "master" ]
  workflow_dispatch: 
permissions:
  contents: read 
jobs:
  build:
    runs-on: windows-latest 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build and publish website project
        run: |
          # Create publish directory
          New-Item -ItemType Directory -Path "publish" -Force
          
          # Try to build the website to generate bin folder with DLLs
          Write-Host "Attempting to build website to generate compiled assemblies..."
          try {
            # Try to build just the website project (not the solution)
            msbuild "cobrawebsite\" /p:Configuration=Release /p:Platform="Any CPU" /t:Build -verbosity:minimal
            Write-Host "Build completed successfully"
          } catch {
            Write-Host "Build failed, continuing with file copy approach"
          }
          
          # Use aspnet_compiler.exe from .NET Framework installation
          $aspnetCompiler = "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\aspnet_compiler.exe"
          
          if (Test-Path $aspnetCompiler) {
            Write-Host "Using aspnet_compiler from Windows SDK"
            & $aspnetCompiler -v /cobrawebsite -p "cobrawebsite\" -f "publish\"
          } else {
            Write-Host "aspnet_compiler not found in Windows SDK, using manual copy method"
            
            # Copy all website files including bin folder
            Copy-Item -Path "cobrawebsite\*" -Destination "publish\" -Recurse -Force
            
            # Ensure bin folder is copied with all DLLs
            if (Test-Path "cobrawebsite\bin") {
              Write-Host "Copying bin folder with compiled assemblies..."
              if (!(Test-Path "publish\bin")) { New-Item -ItemType Directory -Path "publish\bin" -Force }
              Copy-Item -Path "cobrawebsite\bin\*" -Destination "publish\bin\" -Recurse -Force
            } else {
              Write-Host "Warning: No bin folder found. Website may not have compiled assemblies."
            }
            
            # Only remove source files, keep all DLLs and compiled assemblies
            Get-ChildItem "publish\" -Filter "*.cs" -Recurse | Remove-Item -Force -ErrorAction SilentlyContinue
            if (Test-Path "publish\obj") { Remove-Item "publish\obj" -Recurse -Force -ErrorAction SilentlyContinue }
            
            # Don't remove Debug folder if it contains DLLs
            if (Test-Path "publish\bin\Debug") {
              $debugDlls = Get-ChildItem "publish\bin\Debug" -Filter "*.dll" -ErrorAction SilentlyContinue
              if ($debugDlls.Count -eq 0) {
                Remove-Item "publish\bin\Debug" -Recurse -Force -ErrorAction SilentlyContinue
                Write-Host "Removed empty Debug folder"
              } else {
                Write-Host "Keeping Debug folder as it contains DLL files"
              }
            }
          }
          
      - name: Verify DLLs in publish directory
        run: |
          echo "Checking for DLL files in publish directory:"
          if (Test-Path "publish\bin") {
            Get-ChildItem "publish\bin" -Filter "*.dll" -Recurse | ForEach-Object { 
              Write-Host "Found DLL: $($_.FullName)" 
            }
          } else {
            Write-Host "Warning: No bin directory found in publish folder"
          }
          
      - name: List build output
        run: |
          echo "Contents of workspace:"
          dir
          echo "Checking for publish directory:"
          if (Test-Path "publish") { 
            echo "Publish directory found:"
            dir publish -Recurse 
          } else { 
            echo "Publish directory not found"
          }

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: publish

  # deploytodev:
  #   permissions:
  #     contents: none
  #   runs-on: windows-latest
  #   needs: build
  #   environment:
  #     name: 'Development'
  #     url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
 
  #   steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: .net-app
 
  #     - name: Deploy to Azure Web App
  #       id: deploy-to-webapp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.AZURE_WEBAPP_NAME_DEV }}
  #         publish-profile: ${{ secrets.devgithubsecretappdeployment }}
  #         package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  # deploytostage:
  #    permissions:
  #     contents: none
  #    runs-on: windows-latest
  #    needs: deploytodev
  #    environment:
  #     name: 'Stage'
  #     url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
 
  #    steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: .net-app
 
  #     - name: Deploy to Azure Web App
  #       id: deploy-to-webapp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.AZURE_WEBAPP_NAME_STAGE }}
  #         publish-profile: ${{ secrets.stggithubsecretappdeployment }}
  #         package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  # deploytoproduction:
  #   permissions:
  #     contents: none
  #   runs-on: windows-latest
  #   needs: deploytostage
  #   environment:
  #     name: 'Production'
  #     url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
 
  #   steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: .net-app
 
  #     - name: Deploy to Azure Web App
  #       id: deploy-to-webapp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.AZURE_WEBAPP_NAME }}
  #         publish-profile: ${{ secrets.githubsecretappdeployment }}
  #         package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
